<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#	// 生成配置
	// 是否生成所有表
	bool builderAll = true; 
	// 是否使用表名配置
	bool useTableNamesDictionary = true;
#>
<#	// 连接字符串,表结构查询语句
	string musicStoreConnectionString = @"Data Source=WANGJUN\WANGJUN;Initial Catalog=Read;Persist Security Info=True;User ID=sa;Password=123456;Max Pool Size=100;Min Pool Size=20";
	string getAllTableSchemaSqlTemplate = @"SELECT sysobjects.Name as TableName,case when  syscolumns.Name =(SELECT COLUMN_NAME   FROM INFORMATION_SCHEMA.columns WHERE TABLE_NAME=sysobjects.Name   AND COLUMNPROPERTY(OBJECT_ID(sysobjects.Name),COLUMN_NAME,'IsIdentity')=1 )  then 1 else  0 end as IdentityColumn  , syscolumns.isnullable as IsNull,syscolumns.Name as ColumnName, SysTypes.Name as ColumnType, syscolumns.Length as ColumnLength, isnull(sys.extended_properties.Value,'') as Remark,case when syscolumns.name in (select primarykey=a.name FROM syscolumns a inner join sysobjects b on a.id=b.id  and b.xtype='U' and b.name<>'dtproperties' where  exists(SELECT 1 FROM sysobjects where xtype='PK' and name in (SELECT name FROM sysindexes WHERE indid in(SELECT indid FROM sysindexkeys WHERE id = a.id AND colid=a.colid))) and b.name=sysobjects.Name) then 1 else 0 end as IsKey FROM sysobjects,SysTypes,syscolumns LEFT JOIN sys.extended_properties ON (Syscolumns.Id = sys.extended_properties.major_id AND Syscolumns.Colid = sys.extended_properties.minor_id) WHERE (sysobjects.Xtype ='u' OR Sysobjects.Xtype ='v') AND sysobjects.name='{0}' AND Sysobjects.Id = Syscolumns.Id AND SysTypes.XType = Syscolumns.XType AND SysTypes.Name <> 'sysname' AND Sysobjects.Name Like '%' AND (sys.extended_properties.name='MS_Description' or sys.extended_properties.name is null) ORDER By SysObjects.Name, SysColumns.colid ";
#>
<#	// 设置要生成的当前数据库中所有的表名	
	Dictionary<string,string> tableNames=new Dictionary<string,string>();

#>
<#	// 获取当前数据库中所有的表名	
	if (builderAll == true )
	{  		
		using (SqlConnection sqlConnection = new SqlConnection(musicStoreConnectionString))
		{
			// 获取所有用户表的查询语句
			string getAllTableNameSql = "SELECT name FROM sysobjects where xtype='U'";
			SqlCommand sqlCommand = new SqlCommand(getAllTableNameSql, sqlConnection);
			sqlConnection.Open();
			SqlDataReader reader = sqlCommand.ExecuteReader();

			while (reader.Read())
			{
				string theTableName = reader["name"] as string;
				if(useTableNamesDictionary == true)
				{
					if(tableNames.ContainsKey(theTableName)){
						continue;
					}
				}
				tableNames.Add(theTableName,theTableName);
			}
		} 
	}
#>
/*
	以下代码为T4自动生成的代码，请不要擅自修改
	生成时间:<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff") #>
	生成机器：<#= Environment.MachineName #>
	author：xiaose
*/
using System;
using System.Collections.Generic; 
using System.Text;
using HelloData.FrameWork.Data;

 
<#	// 循环生成实体类
		foreach (string tableName in tableNames.Keys)
		{
#>
<#
			// 表注释
			string tableRemark = string.Empty;
			using (SqlConnection sqlConnection = new SqlConnection(musicStoreConnectionString))
			{
				// 获取所有用户表的查询语句
				string getTableRemarkSql = string.Format("SELECT value FROM fn_listextendedproperty (NULL, 'schema', 'dbo', 'table', default, NULL, NULL) where name=N'MS_Description' or objname=N'{0}' ", tableName);
				SqlCommand sqlCommand = new SqlCommand(getTableRemarkSql, sqlConnection);
				sqlConnection.Open();
				SqlDataReader reader = sqlCommand.ExecuteReader();

				if (reader.Read())
				{
					tableRemark = reader["value"] as string;
					tableRemark += "实体类";
				}
			} 
#>	
    /// <summary>
	///	<#=tableRemark #>
	/// </summary>
	[Serializable]
    public partial class <#=tableNames[tableName] #>: BaseEntity
    {
	  
<#	// 生成属性
			using (SqlConnection sqlConnection = new SqlConnection(musicStoreConnectionString))
			{
				// 获取所有用户表的查询语句
				string getAllTableSchemaSql = string.Format(getAllTableSchemaSqlTemplate, tableName);
				SqlCommand sqlCommand = new SqlCommand(getAllTableSchemaSql, sqlConnection);
				sqlConnection.Open();
				SqlDataReader reader = sqlCommand.ExecuteReader();

				while (reader.Read())
				{
			     	bool iskey=reader["iskey"].ToString()!="0";//是否为主键
					bool isnullable=reader["IsNull"].ToString()=="0";//不允许为空
					string dbDataType = reader["ColumnType"] as string; // 数据库中使用的类型
					string dataType = string.Empty; // 数据类型
					
					switch (dbDataType)
					{
						case "decimal":
						case "numeric":
						case "money":
						case "smallmoney":
							if(isnullable)
								dataType="decimal";
							else
							    dataType = "decimal?";
							break;
						case "char":
						case "nchar":
						case "varchar":
						case "nvarchar":
						case "text":
						case "ntext":
							dataType = "string";
							break;
						case "uniqueidentifier":
							if(isnullable)
								dataType="Guid";
							else
							   dataType = "Guid?";
							break;
						case "bit":
							if(isnullable)
								dataType="bool";
							else	dataType = "bool?";
							break;
						case "real":
								if(isnullable)
								dataType="Single";
							else	dataType = "Single?";
							break;
						case "bigint":
								if(isnullable)
								dataType="long";
							else	dataType = "long?";
							break;
						case "int":
								if(isnullable)
								dataType="int";
							else	dataType = "int?";
							break;
						case "tinyint":
						case "smallint":
								if(isnullable)
								dataType="short";
							else	dataType = "short?";
							break;
						case "float":
								if(isnullable)
								dataType="float";
							else	dataType = "float?";
							break;
						case "date":
						case "datetime":
						case "datetime2":
						case "smalldatetime":
								if(isnullable)
								dataType="DateTime";
							else	dataType = "DateTime?";
							break;
						case "datetimeoffset ":
							dataType = "DateTimeOffset?";
							break;
						case "timeSpan ":
							dataType = "TimeSpan?";
							break;
						case "image":
						case "binary":
						case "varbinary":
							dataType = "byte[]";
							break;
						default:
							break;
					}
#>
	    /// <summary>
		///	<#=(reader["Remark"] as string).Replace(Environment.NewLine,"").Replace("\n","").Replace("\r","").Replace(" ","")#>
		/// </summary>
<#
		if(!iskey)
		{
#> 
		public <#=dataType #> <#=reader["ColumnName"] as string#> { get; set; }		
<#
}else
{
#>
        [Column(IsKeyProperty = true<#= ((reader["IdentityColumn"].ToString())=="1"?",AutoIncrement=true":"")#>)]
		public <#=dataType #> <#=reader["ColumnName"] as string#> { get; set; }	
		public  <#=tableNames[tableName] #>()
        {
            base.SetIni(this,"<#=tableNames[tableName] #>","<#=reader["ColumnName"] as string#>");
        }	
<#
}

				}
				#>
				
		public static class Columns
		{
<#
				reader.Close();
				SqlDataReader reader1 = sqlCommand.ExecuteReader();
			   while (reader1.Read())
				{
				
#>
			public const string <#=reader1["ColumnName"] as string#>="<#=reader1["ColumnName"] as string#>";					
<#
		}
#>
		}
				 
	}
				<#
		}
	}
 
 #>
 

